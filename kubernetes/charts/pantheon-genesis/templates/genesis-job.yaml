{{- if .Values.validators.generated }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "pantheon-genesis.fullname" . }}-init
  labels:
    app.kubernetes.io/name: {{ include "pantheon-genesis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "pantheon-genesis.chart" . }}
  annotations:
#    helm.sh/hook-weight: "0"
#    helm.sh/hook: "post-install"
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "pantheon-genesis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: "Never"
      containers:
        - name: generate-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # command: ["/bin/sh", "-c"]
          # args: ["/init/generate-genesis-manager.sh"]
          command:
            - /bin/sh
            - -c
            - |
              apk add curl
              curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl
              /opt/pantheon/bin/pantheon operator generate-blockchain-config --config-file=/config/config-genesis.json --to=/genesis-generated
              ./kubectl create configmap genesis-pantheon --from-file=genesis.json=/genesis-generated/genesis.json
              i=1
              for f in /genesis-generated/keys/*; do
                if [ -d ${f} ]; then
                  echo $f
                  ./kubectl create secret generic genesis-pantheon-validator-${i}-keys --namespace {{ .Release.Namespace }} --from-file=private.key=${f}/key.priv  --from-file=public.key=${f}/key.pub
                  i=$((i+1))
                fi
              done
          volumeMounts:
            - name: config
              mountPath: /config
            - name: genesis-generated
              mountPath: /genesis-generated
      volumes:
        - name: config
          configMap:
            name: {{ include "pantheon-genesis.fullname" . }}-config
        - name: genesis-generated
          emptyDir: {}
{{- end }}

{{- if .Values.validators.generated }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "pantheon-genesis.fullname" . }}-keys-cleanup
  labels:
    app.kubernetes.io/name: {{ include "pantheon-genesis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "pantheon-genesis.chart" . }}
  annotations:
    helm.sh/hook-weight: "0"
    helm.sh/hook: "post-delete"
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "pantheon-genesis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: "Never"
      containers:
        - name: setup-keys
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # command: ["/bin/sh", "-c"]
          # args: ["/init/bootnode-key-manager.sh"]
          command:
            - /bin/sh
            - -c
            - |
              apk add curl
              curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl
              ./kubectl delete configmap genesis-pantheon --namespace {{ .Release.Namespace }}
              for f in `seq 1 {{ .Values.config.blockchain.nodes.count }}`; do
                echo $f
                ./kubectl delete secret genesis-pantheon-validator-${f}-keys --namespace {{ .Release.Namespace }}
              done
{{- end }}