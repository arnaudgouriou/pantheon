---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "pantheon-node.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "pantheon-node.name" . }}
    helm.sh/chart: {{ include "pantheon-node.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: OrderedReady
  serviceName: {{ include "pantheon-node.fullname" . }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "pantheon-node.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "pantheon-node.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
{{- if .Values.node.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9303"
{{- end}}
    spec:
      terminationGracePeriodSeconds: 20
      containers:
        - name: validators
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PANTHEON_OPTS
              value: "-Dpantheon.docker=false"
            - name: BOOTNODE_PUBKEY_SECRET
              valueFrom:
                secretKeyRef:
                  name: bootnode-pantheon-node-keys
                  key: enode.key
          command:
            - /bin/sh
            - -c
          args:
            - |
               exec /opt/pantheon/bin/pantheon \
                --config-file=/etc/pantheon/config.toml \
                --bootnodes{{- if not .Values.bootnode.enabled }}=enode://${BOOTNODE_PUBKEY_SECRET}@${BOOTNODE_PANTHEON_NODE_SERVICE_HOST}:{{ .Values.node.p2p.port }}{{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /etc/pantheon
            {{- if .Values.validators.enabled}}
            - name: secret-validators
              mountPath: /secret
            {{- end }}
            {{- if .Values.bootnode.enabled }}
            - name: secret-bootnode
              mountPath: /secret
            {{- end }}
            - name: genesis-config
              mountPath: /etc/genesis
          ports:
            - name: http
              containerPort: {{ .Values.node.rpc.port }}
              protocol: TCP
            - name: ws
              containerPort: {{ .Values.node.ws.port }}
              protocol: TCP
            - name: graphql
              containerPort: {{ .Values.node.graphql.port }}
              protocol: TCP
            - name: p2p-tcp
              containerPort: {{ .Values.node.p2p.port }}
              protocol: TCP
            - name: p2p-udp
              containerPort: {{ .Values.node.p2p.port }}
              protocol: UDP
          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "pantheon-node.fullname" . }}-config
        - name: genesis-config
          configMap:
            name: {{ .Values.genesis.name }}
        {{- if .Values.validators.enabled }}
        - name: secret-validators
          secret:
            {{- if .Values.validators.privKey }}
            secretName: {{ include "pantheon-node.fullname" . }}-validators
            {{- else }}
            secretName: genesis-pantheon-validator-{{ .Values.index }}-keys
            {{- end }}
        {{- end }}
        {{- if .Values.bootnode.enabled }}
        - name: secret-bootnode
          secret:
            secretName: {{ include "pantheon-node.fullname" . }}-keys
        {{- end }}
        {{- if .Values.permissions.enabled }}
        - name: permissions-config
          configMap:
            name: {{ include "pantheon-node.fullname" . }}-permissions
        {{- end }}
        - name: permissions-nodes-config
          emptyDir: {}
        - name: http-authentication-credentials
          emptyDir: {}
        - name: ws-authentication-credentials
          emptyDir: {}
        - name: permissions-accounts
          emptyDir: {}
        {{- if not .Values.pantheon.persistentVolume.enabled }}
        - name: data
          emptyDir:
            sizeLimit: "2Gi"
        {{- end }}
  {{- if .Values.pantheon.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- if .Values.pantheon.persistentVolume.annotations }}
        annotations:
{{ toYaml .Values.pantheon.persistentVolume.annotations | indent 10 }}
        {{- end }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: "{{ .Values.pantheon.persistentVolume.size }}"
        {{- if .Values.pantheon.persistentVolume.storageClass }}
        {{- if (eq "-" .Values.pantheon.persistentVolume.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.pantheon.persistentVolume.storageClass }}"
        {{- end }}
        {{- end }}
  {{- end }}